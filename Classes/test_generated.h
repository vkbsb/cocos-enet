// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TEST_LANMULTIPLAYER_H_
#define FLATBUFFERS_GENERATED_TEST_LANMULTIPLAYER_H_

#include "flatbuffers/flatbuffers.h"


namespace LANMultiplayer {

struct ServerInformation;

struct ServerInformation : private flatbuffers::Table {
  enum {
    VT_HOSTNAME = 4,
    VT_PORT = 6
  };
  const flatbuffers::String *hostname() const { return GetPointer<const flatbuffers::String *>(VT_HOSTNAME); }
  int16_t port() const { return GetField<int16_t>(VT_PORT, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_HOSTNAME) &&
           verifier.Verify(hostname()) &&
           VerifyField<int16_t>(verifier, VT_PORT) &&
           verifier.EndTable();
  }
};

struct ServerInformationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hostname(flatbuffers::Offset<flatbuffers::String> hostname) { fbb_.AddOffset(ServerInformation::VT_HOSTNAME, hostname); }
  void add_port(int16_t port) { fbb_.AddElement<int16_t>(ServerInformation::VT_PORT, port, 0); }
  ServerInformationBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ServerInformationBuilder &operator=(const ServerInformationBuilder &);
  flatbuffers::Offset<ServerInformation> Finish() {
    auto o = flatbuffers::Offset<ServerInformation>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<ServerInformation> CreateServerInformation(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> hostname = 0,
   int16_t port = 0) {
  ServerInformationBuilder builder_(_fbb);
  builder_.add_hostname(hostname);
  builder_.add_port(port);
  return builder_.Finish();
}

inline const LANMultiplayer::ServerInformation *GetServerInformation(const void *buf) { return flatbuffers::GetRoot<LANMultiplayer::ServerInformation>(buf); }

inline bool VerifyServerInformationBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<LANMultiplayer::ServerInformation>(); }

inline void FinishServerInformationBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<LANMultiplayer::ServerInformation> root) { fbb.Finish(root); }

}  // namespace LANMultiplayer

#endif  // FLATBUFFERS_GENERATED_TEST_LANMULTIPLAYER_H_
